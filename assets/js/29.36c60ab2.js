(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{78:function(_,v,t){"use strict";t.r(v);var e=t(0),d=Object(e.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"网络"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络"}},[_._v("#")]),_._v(" 网络")]),_._v(" "),t("h2",{attrs:{id:"tcp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[_._v("#")]),_._v(" TCP")]),_._v(" "),t("h3",{attrs:{id:"tcp标志位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp标志位"}},[_._v("#")]),_._v(" TCP标志位")]),_._v(" "),t("p",[_._v("位码即TCP标志位。")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("标示")]),_._v(" "),t("th",[_._v("描述")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("SYN")]),_._v(" "),t("td",[_._v("Synchronous 建立联机")])]),_._v(" "),t("tr",[t("td",[_._v("ACK")]),_._v(" "),t("td",[_._v("Acknowledgement 确认")])]),_._v(" "),t("tr",[t("td",[_._v("PSH")]),_._v(" "),t("td",[_._v("Push 传送")])]),_._v(" "),t("tr",[t("td",[_._v("FIN")]),_._v(" "),t("td",[_._v("Finish 结束")])]),_._v(" "),t("tr",[t("td",[_._v("RST")]),_._v(" "),t("td",[_._v("Reset 重置")])]),_._v(" "),t("tr",[t("td",[_._v("URG")]),_._v(" "),t("td",[_._v("Urgent 紧急")])]),_._v(" "),t("tr",[t("td",[_._v("Sequence number")]),_._v(" "),t("td",[_._v("顺序号码")])]),_._v(" "),t("tr",[t("td",[_._v("Acknowledge number")]),_._v(" "),t("td",[_._v("确认号码")])])])]),_._v(" "),t("h3",{attrs:{id:"tcp状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp状态"}},[_._v("#")]),_._v(" TCP状态")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("状态")]),_._v(" "),t("th",[_._v("描述")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("CLOSED")]),_._v(" "),t("td",[_._v("初始状态，表示没有任何连接。")])]),_._v(" "),t("tr",[t("td",[_._v("LISTEN")]),_._v(" "),t("td",[_._v("Server端的某个Socket正在监听来自远方的TCP端口的连接请求。")])]),_._v(" "),t("tr",[t("td",[_._v("SYN_SENT")]),_._v(" "),t("td",[_._v("发送连接请求后等待确认信息。当客户端Socket进行Connect连接时，会首先发送SYN包，随即进入SYN_SENT状态，然后等待Server端发送三次握手中的第2个包。")])]),_._v(" "),t("tr",[t("td",[_._v("SYN_RECEIVED")]),_._v(" "),t("td",[_._v("收到一个连接请求后回送确认信息和对等的连接请求，然后等待确认信息。通常是建立TCP连接的三次握手过程中的一个中间状态，表示Server端的Socket接收到来自Client的SYN包，并作出回应。")])]),_._v(" "),t("tr",[t("td",[_._v("ESTABLISHED")]),_._v(" "),t("td",[_._v("表示连接已经建立，可以进行数据传输。")])]),_._v(" "),t("tr",[t("td",[_._v("FIN_WAIT_1")]),_._v(" "),t("td",[_._v("主动关闭连接的一方等待对方返回 "),t("code",[_._v("ACK")]),_._v(" 包。若Socket在 "),t("code",[_._v("ESTABLISHED")]),_._v(" 状态下主动关闭连接并向对方发送 "),t("code",[_._v("FIN")]),_._v(" 包（表示己方不再有数据需要发送），则进入 "),t("code",[_._v("FIN_WAIT_1")]),_._v(" 状态，等待对方返回 "),t("code",[_._v("ACK")]),_._v(" 包，此后还能读取数据，但不能发送数据。在正常情况下，无论对方处于何种状态，都应该马上返回 "),t("code",[_._v("ACK")]),_._v(" 包，所以 "),t("code",[_._v("FIN_WAIT_1")]),_._v(" 状态一般很难见到。")])]),_._v(" "),t("tr",[t("td",[_._v("FIN_WAIT_2")]),_._v(" "),t("td",[_._v("主动关闭连接的一方收到对方返回的 "),t("code",[_._v("ACK")]),_._v(" 包后，等待对方发送 "),t("code",[_._v("FIN")]),_._v(" 包。处于 "),t("code",[_._v("FIN_WAIT_1")]),_._v(" 状态下的Socket收到了对方返回的 "),t("code",[_._v("ACK")]),_._v(" 包后，便进入 "),t("code",[_._v("FIN_WAIT_2")]),_._v(" 状态。由于 "),t("code",[_._v("FIN_WAIT_2")]),_._v(" 状态下的Socket需要等待对方发送的 "),t("code",[_._v("FIN")]),_._v(" 包，所有常常可以看到。若在 "),t("code",[_._v("FIN_WAIT_1")]),_._v(" 状态下收到对方发送的同时带有 "),t("code",[_._v("FIN")]),_._v(" 和 "),t("code",[_._v("ACK")]),_._v(" 的包时，则直接进入 "),t("code",[_._v("TIME_WAIT")]),_._v(" 状态，无须经过 "),t("code",[_._v("FIN_WAIT_2")]),_._v(" 状态。")])]),_._v(" "),t("tr",[t("td",[_._v("CLOSE_WAIT")]),_._v(" "),t("td",[_._v("表示被动关闭连接的一方在等待关闭连接。当收到对方发送的FIN包后（表示对方不再有数据需要发送），相应的返回ACK包，然后进入CLOSE_WAIT状态。在该状态下，若己方还有数据未发送，则可以继续向对方进行发送，但不能再读取数据，直到数据发送完毕。")])]),_._v(" "),t("tr",[t("td",[_._v("CLOSING")]),_._v(" "),t("td",[_._v("比较罕见的例外状态。正常情况下，发送FIN包后应该先收到（或同时收到）对方的ACK包，再收到对方的FIN包，而CLOSING状态表示发送FIN包后并没有收到对方的ACK包，却已收到了对方的FIN包。有两种情况可能导致这种状态：其一，如果双方几乎在同时关闭连接，那么就可能出现双方同时发送FIN包的情况；其二，如果ACK包丢失而对方的FIN包很快发出，也会出现FIN先于ACK到达。")])]),_._v(" "),t("tr",[t("td",[_._v("LAST_ACK")]),_._v(" "),t("td",[_._v("被动关闭连接的一方在CLOSE_WAIT状态下完成数据的发送后便可向对方发送FIN包（表示己方不再有数据需要发送），然后等待对方返回ACK包。收到ACK包后便回到CLOSED状态，释放网络资源。")])]),_._v(" "),t("tr",[t("td",[_._v("TIME_WAIT")]),_._v(" "),t("td",[_._v("主动关闭连接的一方收到对方发送的FIN包后返回ACK包（表示对方也不再有数据需要发送，此后不能再读取或发送数据），然后等待足够长的时间（2MSL）以确保对方接收到ACK包（考虑到丢失ACK包的可能和迷路重复数据包的影响），最后回到CLOSED状态，释放网络资源。")])])])]),_._v(" "),t("h3",{attrs:{id:"tcp窗口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp窗口"}},[_._v("#")]),_._v(" TCP窗口")]),_._v(" "),t("p",[_._v("TCP使用窗口机制进行流量控制。")]),_._v(" "),t("p",[_._v("连接建立时，各端分配一块 "),t("code",[_._v("缓冲区")]),_._v(" 用来存储接收的数据，并将 "),t("code",[_._v("缓冲区")]),_._v(" 的尺寸发送给另一端。接收方发送的确认信息中包含了自己剩余的缓冲区尺寸，剩余缓冲区空间的数量叫做 "),t("code",[_._v("窗口")]),_._v("。")]),_._v(" "),t("h3",{attrs:{id:"建立连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#建立连接"}},[_._v("#")]),_._v(" 建立连接")]),_._v(" "),t("p",[_._v("TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接。")]),_._v(" "),t("p",[t("strong",[_._v("建立连接流程")])]),_._v(" "),t("ul",[t("li",[t("ol",[t("li",[_._v("第一次握手：客户端发送 "),t("code",[_._v("SYN")]),_._v(" 包（SYN=j）到服务端，并进入 "),t("code",[_._v("SYN_SENT")]),_._v(" 状态，等待服务端确认。")])])]),_._v(" "),t("li",[t("ol",{attrs:{start:"2"}},[t("li",[_._v("第二次握手：服务端收到 "),t("code",[_._v("SYN")]),_._v(" 包，必须确认客户A的 "),t("code",[_._v("SYN")]),_._v("（ACK=j+1），同时自己也发送一个 "),t("code",[_._v("SYN")]),_._v(" 包（SYN=k），即 "),t("code",[_._v("SYN+ACK")]),_._v(" 包，此时服务端由 "),t("code",[_._v("LISTEN")]),_._v(" 进入 "),t("code",[_._v("SYN_RECEIVED")]),_._v(" 状态。")])])]),_._v(" "),t("li",[t("ol",{attrs:{start:"3"}},[t("li",[_._v("第三次握手：客户端收到服务端的 "),t("code",[_._v("SYN＋ACK")]),_._v(" 包，向服务端发送确认包 "),t("code",[_._v("ACK")]),_._v("（ACK=k+1），此包发送完毕，客户端和服务端进入 "),t("code",[_._v("ESTABLISHED")]),_._v(" 状态，完成三次握手。")])])])]),_._v(" "),t("p",[_._v("完成三次握手，客户端与服务端开始传送数据。")]),_._v(" "),t("h3",{attrs:{id:"关闭连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关闭连接"}},[_._v("#")]),_._v(" 关闭连接")]),_._v(" "),t("p",[_._v("由于TCP连接是全双工的，因此每个方向都必须单独进行关闭。")]),_._v(" "),t("p",[t("strong",[_._v("关闭连接流程")])]),_._v(" "),t("p",[_._v("TCP采用四次握手关闭连接。")]),_._v(" "),t("ul",[t("li",[t("ol",[t("li",[_._v("客户端发送一个 "),t("code",[_._v("FIN")]),_._v("，用来关闭客户端到服务端的数据传送。 此时客户端进入 "),t("code",[_._v("FIN_WAIT_1")]),_._v(" 状态。")])])]),_._v(" "),t("li",[t("ol",{attrs:{start:"2"}},[t("li",[_._v("服务端收到这个 "),t("code",[_._v("FIN")]),_._v("，它发回一个 "),t("code",[_._v("ACK")]),_._v("，确认序号为收到的序号加1。此时服务端进入 "),t("code",[_._v("CLOSE_WAIT")]),_._v(" 状态。客户端收到服务端返回的 "),t("code",[_._v("ACK")]),_._v(" 包后进入 "),t("code",[_._v("FIN_WAIT_2")]),_._v(" 状态，等待服务端发送 "),t("code",[_._v("FIN")]),_._v(" 包。")])])]),_._v(" "),t("li",[t("ol",{attrs:{start:"3"}},[t("li",[_._v("服务端完成数据的发送后，将 "),t("code",[_._v("FIN")]),_._v(" 包发送给客户端，然后进入 "),t("code",[_._v("LAST_ACK")]),_._v(" 状态，等待客户端返回 "),t("code",[_._v("ACK")]),_._v(" 包，此后服务端既不能读取数据，也不能发送数据。")])])]),_._v(" "),t("li",[t("ol",{attrs:{start:"4"}},[t("li",[_._v("客户端收到 "),t("code",[_._v("FIN")]),_._v(" 包后向服务端发送 "),t("code",[_._v("ACK")]),_._v(" 包，然后进入 "),t("code",[_._v("TIME_WAIT")]),_._v(" 状态，接着等待足够长的时间（2MSL）以确保服务端接收到 "),t("code",[_._v("ACK")]),_._v(" 包，最后回到 "),t("code",[_._v("CLOSED")]),_._v(" 状态，释放网络资源。服务端收到客户端返回的 "),t("code",[_._v("ACK")]),_._v(" 包后便回到 "),t("code",[_._v("CLOSED")]),_._v(" 状态，释放网络资源。")])])])]),_._v(" "),t("h3",{attrs:{id:"time-wait"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#time-wait"}},[_._v("#")]),_._v(" TIME_WAIT")]),_._v(" "),t("p",[_._v("主动关闭连接的一方在发送最后一个 "),t("code",[_._v("ACK")]),_._v(" 包后，无论对方是否收到都会进入 "),t("code",[_._v("TIME_WAIT")]),_._v(" 状态，等待2MSL的时间，然后才能释放网络资源。MSL就是Maximum Segment Lifetime（数据包的最大生命周期），是一个数据包能在互联网上生存的最长时间，若超过这个时间则该数据包将会消失在网络中。操作系统通常会将2MSL设为4分钟，最低不少于30秒，因而 "),t("code",[_._v("TIME_WAIT")]),_._v(" 状态一般维持在30秒至4分钟。")]),_._v(" "),t("p",[t("strong",[_._v("TIME_WAIT状态的存在主要有两个原因")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("可靠地实现TCP全双工连接的终止。在关TCP闭连接时，最后的ACK包是由主动关闭方发出的，如果这个 "),t("code",[_._v("ACK")]),_._v(" 包丢失，则被动关闭方将重发 "),t("code",[_._v("FIN")]),_._v(" 包，因此主动方必须维护状态信息，以允许它重发这个 "),t("code",[_._v("ACK")]),_._v(" 包。如果不维持这个状态信息，那么主动方将回到 "),t("code",[_._v("CLOSED")]),_._v(" 状态，并对被动方重发的 "),t("code",[_._v("FIN")]),_._v(" 包响应 "),t("code",[_._v("RST")]),_._v(" 包，而被动关闭方将此包解释成一个错误（在Java中会抛出connection reset的SocketException)。因而，要实现TCP全双工连接的正常终止，必须能够处理四次握手协议中任意一个包丢失的情况，主动关闭方必须维持状态信息进入 "),t("code",[_._v("TIME_WAIT")]),_._v(" 状态。")])]),_._v(" "),t("li",[t("p",[_._v("确保迷路重复数据包在网络中消失，防止上一次连接中的包迷路后重新出现，影响新连接。TCP数据包可能由于路由器异常而迷路，在迷路期间，数据包发送方可能因超时而重发这个包，迷路的数据包在路由器恢复后也会被送到目的地，这个迷路的数据包就称为Lost Duplicate。在关闭一个TCP连接后，如果马上使用相同的IP地址和端口建立新的TCP连接，那么有可能出现前一个连接的迷路重复数据包在前一个连接关闭后再次出现，影响新建立的连接。为了避免这一情况，TCP协议不允许使用处于 "),t("code",[_._v("TIME_WAIT")]),_._v(" 状态的连接的IP和端口启动一个新连接，只有经过2MSL的时间，确保上一次连接中所有的迷路重复数据包都已消失在网络中，才能安全地建立新连接。\n　　\n对于客户端而言，每个连接都需要占用一个端口，而系统允许的可用端口数不足65000个（这也是在TCP参数优化后才能达到）。因此，如果客户端发起过多的连接并主动关闭（假设没有重用端口或者连接多个服务端），就会有大量的连接在关闭后处于 "),t("code",[_._v("TIME_WAIT")]),_._v(" 状态，等待2MSL的时间后才能释放网络资源（包括端口），于是客户端会由于缺少可用端口而无法新建连接。")])])]),_._v(" "),t("p",[_._v("对服务端而言（特别是处理高并发短连接的服务端），服务端端与客户端建立的连接是使用同一个端口的，即监听的端口，每个连接通过一个五元组区分，包括源IP地址、源端口、传输层协议号、目的IP地址、目的端口，因而在理论上，服务端不受系统端口数的限制。但是，服务端对每个端口上的连接数是有限制的，它要使用哈希表记录端口上的每个连接，并受到文件描述符的最大打开数的限制。所以，如果服务端主动关闭连接，同样会有大量的连接在关闭后处于 "),t("code",[_._v("TIME_WAIT")]),_._v(" 状态，等待2MSL的时间后才能释放网络资源（包括哈希表上的连接记录和文件描述符），于是服务端会由于达到哈希表和文件描述符的限制而无法接受新连接，造成性能的急剧下滑，性能曲线会持续产生严重的波动。")]),_._v(" "),t("p",[_._v("对于这种情况，有三种应对方式：")]),_._v(" "),t("ol",[t("li",[_._v("试图让客户端主动关闭连接，由于每个客户端的并发量都比较低，因而不会产生性能瓶颈。")]),_._v(" "),t("li",[_._v("优化服务端的系统TCP参数，使其网络资源的最大值、消耗速度和恢复速度达到平衡。")]),_._v(" "),t("li",[_._v("改写TCP协议，重新实现底层代码，不过该方式难度很大，而且系统的稳定性和安全性可能受到影响。")])])])}),[],!1,null,null,null);v.default=d.exports}}]);